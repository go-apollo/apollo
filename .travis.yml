sudo: required

language: go

go:
  - "1.11"
  - "1.12"
  - master 

# Skip the install step. Don't `go get` dependencies. Only build with the
# code in vendor/
install: true

matrix:
  # It's ok if our code fails on unstable development versions of Go.
  allow_failures:
    - go: master
  # Don't wait for tip tests to finish. Mark the test run green if the
  # tests pass on the stable versions of Go.
  fast_finish: true

# Don't email me the results of the test runs.
notifications:
  email: false

# Anything in before_script that returns a nonzero exit code will
# flunk the build and immediately stop. It's sorta like having
# set -e enabled in bash. 
before_script:
  - export GO111MODULE=on
  - mkdir -p $HOME/gopath/src/gopkg.in
  - echo $TRAVIS_BUILD_DIR
  - mv $TRAVIS_BUILD_DIR $HOME/gopath/src/gopkg.in/apollo.v0
  - export TRAVIS_BUILD_DIR=$HOME/gopath/src/gopkg.in/apollo.v0
  - GO_FILES=$(find . -iname '*.go' -type f | egrep -v '/vendor') # All the .go files, excluding vendor/
  - go get -u golang.org/x/lint/golint                                # Linter
  - go get -u honnef.co/go/tools/cmd/staticcheck
  - go get github.com/fzipp/gocyclo
  
# script always run to completion (set +e). All of these code checks are must haves
# in a modern Go project.
script:
  - test -z $(gofmt -s -l $GO_FILES)                                 # Fail if a .go file hasn't been formatted with gofmt
  - go vet ./...                                                     # go vet is the official Go static analyzer
  - staticcheck ./...                                                  # "go vet on steroids" + linter
  - gocyclo -over 19 $GO_FILES                                       # forbid code with huge functions
  - golint -set_exit_status $(go list ./...)                         # one last linter
  - go test $(go list ./... | egrep -v '/vendor')
